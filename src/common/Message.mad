import type { Either } from "Either"

import JsonParser from "Json/Parse"
import JsonPrinter from "Json/Print"



export alias MessageEvent = {
  author :: String,
  authorId :: Integer,
  content :: String,
  eventType :: String,
}


printMessageEvent :: MessageEvent -> String
export printMessageEvent = (event) => pipe(
  JsonPrinter.object,
  JsonPrinter.printJson(80),
)([
  #["eventType", JsonPrinter.string(event.eventType)],
  #["author", JsonPrinter.string(event.author)],
  #["authorId", JsonPrinter.integer(event.authorId)],
  #["content", JsonPrinter.string(event.content)],
])

parseMessageEvent :: String -> Either String MessageEvent
export parseMessageEvent = (event) => JsonParser.parse(
  JsonParser.map4(
    (eventType, author, content, authorId) => ({ eventType, author, content, authorId }),
    JsonParser.field("eventType", JsonParser.string),
    JsonParser.field("author", JsonParser.string),
    JsonParser.field("content", JsonParser.string),
    JsonParser.field("authorId", JsonParser.integer),
  ),
  event,
)
